name: Build Rock APK

on:
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate project files
        run: |
          mkdir -p Rock/app/src/main/java/com/rock/browser
          mkdir -p Rock/app/src/main/res/{layout,values,values-ar,drawable,mipmap-anydpi-v26}

          cat > Rock/settings.gradle <<'EOF'
          rootProject.name = "Rock"
          include ':app'
          EOF

          cat > Rock/build.gradle <<'EOF'
          buildscript {
            ext { kotlin_version = '1.9.24' }
            repositories { google(); mavenCentral() }
            dependencies {
              classpath 'com.android.tools.build:gradle:8.5.0'
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            }
          }
          allprojects { repositories { google(); mavenCentral() } }
          task clean(type: Delete) { delete rootProject.buildDir }
          EOF

          cat > Rock/gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          android.enableJetifier=true
          EOF

          cat > Rock/app/build.gradle <<'EOF'
          plugins { id 'com.android.application'; id 'org.jetbrains.kotlin.android' }

          android {
            namespace 'com.rock.browser'
            compileSdk 34
            defaultConfig {
              applicationId "com.rock.browser"
              minSdk 24
              targetSdk 34
              versionCode 1
              versionName "1.0"
            }
            buildTypes {
              release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
              }
              debug { debuggable true }
            }
            buildFeatures { viewBinding true }
            compileOptions {
              sourceCompatibility JavaVersion.VERSION_17
              targetCompatibility JavaVersion.VERSION_17
            }
            kotlinOptions { jvmTarget = '17' }
          }

          dependencies {
            implementation 'androidx.core:core-ktx:1.13.1'
            implementation 'androidx.appcompat:appcompat:1.7.0'
            implementation 'com.google.android.material:material:1.12.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'
            implementation 'androidx.activity:activity-ktx:1.9.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
            implementation 'com.squareup.okhttp3:okhttp:4.12.0'
            implementation 'io.coil-kt:coil:2.6.0'       // تحميل صورة الخلفية من رابط
            implementation 'org.json:json:20240205'      // تخزين السجل بصيغة JSON
          }
          EOF

          cat > Rock/app/proguard-rules.pro <<'EOF'
          EOF

          cat > Rock/app/src/main/AndroidManifest.xml <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <application
              android:allowBackup="true"
              android:icon="@mipmap/ic_launcher"
              android:label="@string/app_name"
              android:roundIcon="@mipmap/ic_launcher_round"
              android:supportsRtl="true"
              android:theme="@style/Theme.Rock">
              <activity android:name=".SettingsActivity" android:exported="false"/>
              <activity android:name=".MainActivity" android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
            <uses-permission android:name="android.permission.INTERNET"/>
          </manifest>
          EOF

          cat > Rock/app/src/main/res/values/themes.xml <<'EOF'
          <resources>
            <style name="Theme.Rock" parent="Theme.MaterialComponents.DayNight.NoActionBar">
              <item name="android:statusBarColor">@android:color/black</item>
              <item name="android:navigationBarColor">@android:color/black</item>
              <item name="colorPrimary">@color/rock_red</item>
              <item name="colorSecondary">@color/rock_gold</item>
            </style>
          </resources>
          EOF

          cat > Rock/app/src/main/res/values/colors.xml <<'EOF'
          <resources>
            <color name="rock_black">#000000</color>
            <color name="rock_gold">#D4AF37</color>
            <color name="rock_red">#D50000</color>
            <color name="rock_white">#FFFFFF</color>
            <color name="rock_gray">#1A1A1A</color>
          </resources>
          EOF

          cat > Rock/app/src/main/res/values/strings.xml <<'EOF'
          <resources>
            <string name="app_name">Rock</string>
            <string name="search_hint">Search or enter URL</string>
            <string name="go">Go</string>
            <string name="back">Back</string>
            <string name="forward">Forward</string>
            <string name="reload">Reload</string>
            <string name="settings">Settings</string>
            <string name="settings_title">Settings</string>
            <string name="language">Language</string>
            <string name="english">English</string>
            <string name="arabic">Arabic</string>
            <string name="download_segments">Download Segments</string>
            <string name="save">Save</string>
            <string name="downloading">Downloading…</string>
            <string name="download_complete">Download complete</string>
            <string name="invalid_url">Invalid URL</string>
            <string name="home_page">Home page</string>
            <string name="home_page_hint">https://example.com or leave empty</string>
            <string name="search_engine">Search engine</string>
            <string name="background_url">Background image URL</string>
            <string name="background_url_hint">https://... (jpg/png)</string>
            <string name="history">History</string>
            <string name="home">Home</string>
            <string name="clear_history">Clear history</string>
          </resources>
          EOF

          cat > Rock/app/src/main/res/values-ar/strings.xml <<'EOF'
          <resources>
            <string name="app_name">Rock</string>
            <string name="search_hint">ابحث أو أدخل رابط</string>
            <string name="go">اذهب</string>
            <string name="back">رجوع</string>
            <string name="forward">تقدم</string>
            <string name="reload">تحديث</string>
            <string name="settings">الإعدادات</string>
            <string name="settings_title">الإعدادات</string>
            <string name="language">اللغة</string>
            <string name="english">إنجليزي</string>
            <string name="arabic">عربي</string>
            <string name="download_segments">تقسيم التحميل</string>
            <string name="save">حفظ</string>
            <string name="downloading">جارِ التحميل…</string>
            <string name="download_complete">اكتمل التحميل</string>
            <string name="invalid_url">رابط غير صالح</string>
            <string name="home_page">الصفحة الرئيسية</string>
            <string name="home_page_hint">https://example.com أو اتركها فارغة</string>
            <string name="search_engine">محرك البحث</string>
            <string name="background_url">رابط خلفية التطبيق</string>
            <string name="background_url_hint">https://... (jpg/png)</string>
            <string name="history">السجل</string>
            <string name="home">الرئيسية</string>
            <string name="clear_history">مسح السجل</string>
          </resources>
          EOF

          cat > Rock/app/src/main/res/layout/activity_main.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
              xmlns:app="http://schemas.android.com/apk/res-auto"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

              <!-- خلفية: هنحمّل الصورة من الإعدادات داخل الكود؛ هنا بس View -->
              <ImageView
                  android:id="@+id/bgImage"
                  android:layout_width="0dp"
                  android:layout_height="0dp"
                  android:src="@drawable/bg_placeholder"
                  android:scaleType="centerCrop"
                  app:layout_constraintTop_toTopOf="parent"
                  app:layout_constraintBottom_toBottomOf="parent"
                  app:layout_constraintStart_toStartOf="parent"
                  app:layout_constraintEnd_toEndOf="parent"/>

              <View
                  android:id="@+id/scrim"
                  android:layout_width="0dp"
                  android:layout_height="0dp"
                  android:background="#66000000"
                  app:layout_constraintTop_toTopOf="parent"
                  app:layout_constraintBottom_toBottomOf="parent"
                  app:layout_constraintStart_toStartOf="parent"
                  app:layout_constraintEnd_toEndOf="parent"/>

              <LinearLayout
                  android:id="@+id/searchBar"
                  android:layout_width="0dp"
                  android:layout_height="56dp"
                  android:layout_margin="12dp"
                  android:background="@drawable/gold_rounded"
                  android:gravity="center_vertical"
                  android:paddingStart="12dp"
                  android:paddingEnd="8dp"
                  app:layout_constraintTop_toTopOf="parent"
                  app:layout_constraintStart_toStartOf="parent"
                  app:layout_constraintEnd_toEndOf="parent">

                  <EditText
                      android:id="@+id/searchInput"
                      android:layout_width="0dp"
                      android:layout_height="wrap_content"
                      android:layout_weight="1"
                      android:text="Rock"
                      android:textColor="@color/rock_black"
                      android:textColorHint="@color/rock_black"
                      android:inputType="textUri"
                      android:singleLine="true"
                      android:background="@android:color/transparent"
                      android:padding="8dp"/>

                  <Button
                      android:id="@+id/goBtn"
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="@string/go"
                      android:textColor="@color/rock_black"/>
              </LinearLayout>

              <WebView
                  android:id="@+id/webView"
                  android:layout_width="0dp"
                  android:layout_height="0dp"
                  android:background="@color/rock_gray"
                  app:layout_constraintTop_toBottomOf="@id/searchBar"
                  app:layout_constraintBottom_toTopOf="@+id/bottomBar"
                  app:layout_constraintStart_toStartOf="parent"
                  app:layout_constraintEnd_toEndOf="parent"/>

              <LinearLayout
                  android:id="@+id/bottomBar"
                  android:layout_width="0dp"
                  android:layout_height="56dp"
                  android:gravity="center"
                  android:background="@color/rock_black"
                  app:layout_constraintBottom_toBottomOf="parent"
                  app:layout_constraintStart_toStartOf="parent"
                  app:layout_constraintEnd_toEndOf="parent">

                  <Button android:id="@+id/backBtn" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/back" android:textColor="@color/rock_white"/>
                  <Button android:id="@+id/forwardBtn" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/forward" android:layout_marginStart="8dp" android:textColor="@color/rock_white"/>
                  <Button android:id="@+id/reloadBtn" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/reload" android:layout_marginStart="8dp" android:textColor="@color/rock_white"/>

                  <!-- جديد: السجل -->
                  <Button android:id="@+id/historyBtn" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/history" android:layout_marginStart="8dp" android:textColor="@color/rock_white"/>

                  <!-- جديد: الرئيسية -->
                  <Button android:id="@+id/homeBtn" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/home" android:layout_marginStart="8dp" android:textColor="@color/rock_white"/>

                  <Button android:id="@+id/settingsBtn" android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="@string/settings" android:layout_marginStart="8dp" android:textColor="@color/rock_white"/>
              </LinearLayout>

          </androidx.constraintlayout.widget.ConstraintLayout>
          EOF

          cat > Rock/app/src/main/res/layout/activity_settings.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:orientation="vertical"
              android:padding="16dp"
              android:background="@color/rock_black">

              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/language"
                  android:textColor="@color/rock_white"
                  android:textSize="16sp"/>
              <Spinner
                  android:id="@+id/langSpinner"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:layout_marginBottom="16dp"/>

              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/download_segments"
                  android:textColor="@color/rock_white"
                  android:textSize="16sp"/>
              <Spinner
                  android:id="@+id/segSpinner"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:layout_marginBottom="16dp"/>

              <!-- محرك البحث -->
              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/search_engine"
                  android:textColor="@color/rock_white"
                  android:textSize="16sp"/>
              <Spinner
                  android:id="@+id/engineSpinner"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:layout_marginBottom="16dp"/>

              <!-- الصفحة الرئيسية -->
              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/home_page"
                  android:textColor="@color/rock_white"
                  android:textSize="16sp" />
              <EditText
                  android:id="@+id/homeInput"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:hint="@string/home_page_hint"
                  android:inputType="textUri"
                  android:textColor="@color/rock_white"
                  android:textColorHint="@color/rock_white"
                  android:background="@android:color/transparent"
                  android:layout_marginBottom="16dp"/>

              <!-- خلفية -->
              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/background_url"
                  android:textColor="@color/rock_white"
                  android:textSize="16sp" />
              <EditText
                  android:id="@+id/bgInput"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:hint="@string/background_url_hint"
                  android:inputType="textUri"
                  android:textColor="@color/rock_white"
                  android:textColorHint="@color/rock_white"
                  android:background="@android:color/transparent"
                  android:layout_marginBottom="16dp"/>

              <Button
                  android:id="@+id/clearHistoryBtn"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/clear_history"
                  android:layout_marginBottom="16dp"/>

              <Button
                  android:id="@+id/saveBtn"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="@string/save"/>
          </LinearLayout>
          EOF

          # عناصر للنص الأبيض في Spinners
          cat > Rock/app/src/main/res/layout/spinner_item.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TextView xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:padding="12dp"
              android:textColor="@color/rock_white"
              android:textSize="16sp"/>
          EOF

          cat > Rock/app/src/main/res/layout/spinner_dropdown_item.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <TextView xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="wrap_content"
              android:padding="12dp"
              android:textColor="@color/rock_white"
              android:textSize="16sp"/>
          EOF

          # خلفية افتراضية (Placeholder) بشكل تدرج
          cat > Rock/app/src/main/res/drawable/bg_placeholder.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
            <gradient android:type="linear" android:angle="90"
              android:startColor="#1e3c72" android:centerColor="#2a5298" android:endColor="#76b2fe"/>
          </shape>
          EOF

          cat > Rock/app/src/main/res/drawable/gold_rounded.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
            <solid android:color="@color/rock_gold"/>
            <corners android:radius="16dp"/>
            <padding android:left="8dp" android:top="8dp" android:right="8dp" android:bottom="8dp"/>
          </shape>
          EOF

          # أيقونة R
          cat > Rock/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@color/rock_red"/>
            <foreground android:drawable="@drawable/ic_r_foreground"/>
          </adaptive-icon>
          EOF

          cat > Rock/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@color/rock_red"/>
            <foreground android:drawable="@drawable/ic_r_foreground"/>
          </adaptive-icon>
          EOF

          cat > Rock/app/src/main/res/drawable/ic_r_foreground.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="108dp" android:height="108dp"
              android:viewportWidth="108" android:viewportHeight="108">
            <path android:fillColor="#00000000" android:strokeColor="#000000" android:strokeWidth="14"
                  android:pathData="M26,20 L26,88 M26,20 L62,20 Q78,20 78,36 Q78,52 62,52 L26,52 M62,52 L84,88"/>
          </vector>
          EOF

          cat > Rock/app/src/main/java/com/rock/browser/MainActivity.kt <<'EOF'
          package com.rock.browser

          import android.annotation.SuppressLint
          import android.content.Intent
          import android.os.Bundle
          import android.util.Patterns
          import android.webkit.*
          import android.view.View
          import android.graphics.Color
          import androidx.appcompat.app.AppCompatActivity
          import androidx.appcompat.app.AlertDialog
          import com.rock.browser.databinding.ActivityMainBinding
          import coil.load
          import org.json.JSONArray
          import java.net.URLEncoder

          class MainActivity : AppCompatActivity() {
              private lateinit var binding: ActivityMainBinding

              @SuppressLint("SetJavaScriptEnabled")
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  binding = ActivityMainBinding.inflate(layoutInflater)
                  setContentView(binding.root)

                  val prefs = getSharedPreferences("rock_settings", MODE_PRIVATE)
                  val segments = prefs.getInt("segments", 4)
                  val bgUrl = prefs.getString("bg_url", "") ?: ""

                  // تحميل خلفية
                  if (bgUrl.isNotBlank()) {
                      binding.bgImage.load(bgUrl)
                  } else {
                      binding.bgImage.setImageResource(R.drawable.bg_placeholder)
                  }

                  with(binding.webView.settings) {
                      javaScriptEnabled = true
                      domStorageEnabled = true
                      loadsImagesAutomatically = true
                      cacheMode = WebSettings.LOAD_DEFAULT
                      userAgentString = userAgentString + " Rock/1.0"
                  }

                  binding.webView.setBackgroundColor(Color.BLACK)
                  binding.webView.webViewClient = object : WebViewClient() {
                      override fun onPageFinished(view: WebView?, url: String?) {
                          super.onPageFinished(view, url)
                          url?.let { addToHistory(it) }
                      }
                  }

                  // ابدأ مخفي
                  binding.webView.loadUrl("about:blank")
                  binding.webView.visibility = View.INVISIBLE

                  binding.webView.setDownloadListener { url, userAgent, contentDisposition, mimetype, contentLength ->
                      val fileName = URLUtil.guessFileName(url, contentDisposition, mimetype)
                      SegmentedDownloader(this, segments).download(url, fileName) {}
                  }

                  binding.goBtn.setOnClickListener { loadFromInput() }
                  binding.searchInput.setOnEditorActionListener { _, _, _ ->
                      loadFromInput(); true
                  }

                  binding.backBtn.setOnClickListener { if (binding.webView.canGoBack()) binding.webView.goBack() }
                  binding.forwardBtn.setOnClickListener { if (binding.webView.canGoForward()) binding.webView.goForward() }
                  binding.reloadBtn.setOnClickListener { binding.webView.reload() }
                  binding.settingsBtn.setOnClickListener { startActivity(Intent(this, SettingsActivity::class.java)) }

                  // زر السجل
                  binding.historyBtn.setOnClickListener { showHistoryDialog() }

                  // زر الرئيسية
                  binding.homeBtn.setOnClickListener {
                      val home = prefs.getString("home", "") ?: ""
                      if (home.isNotBlank()) {
                          showWeb()
                          binding.webView.loadUrl(home)
                      } else {
                          binding.webView.loadUrl("about:blank")
                          binding.webView.visibility = View.INVISIBLE
                      }
                  }
              }

              private fun showWeb() {
                  if (binding.webView.visibility != View.VISIBLE) binding.webView.visibility = View.VISIBLE
              }

              private fun searchEngineBase(): String {
                  val engine = getSharedPreferences("rock_settings", MODE_PRIVATE)
                      .getString("engine", "duck") ?: "duck"
                  return when (engine) {
                      "google" -> "https://www.google.com/search?q="
                      "bing"   -> "https://www.bing.com/search?q="
                      "brave"  -> "https://search.brave.com/search?q="
                      else     -> "https://duckduckgo.com/?q="
                  }
              }

              private fun loadFromInput() {
                  val txt = binding.searchInput.text.toString().trim()
                  if (txt.isEmpty()) return

                  val url = if (Patterns.WEB_URL.matcher(txt).matches() || txt.startsWith("http")) {
                      if (txt.startsWith("http")) txt else "https://$txt"
                  } else {
                      val q = URLEncoder.encode(txt, "UTF-8")
                      searchEngineBase() + q
                  }

                  showWeb()
                  binding.webView.loadUrl(url)
              }

              // ====== السجل البسيط (آخر 50) ======
              private fun addToHistory(u: String) {
                  val sp = getSharedPreferences("rock_settings", MODE_PRIVATE)
                  val arr = JSONArray(sp.getString("history", "[]"))
                  // لا تكرر المتتالي
                  if (arr.length() == 0 || arr.getString(arr.length()-1) != u) {
                      arr.put(u)
                      // اقتطع لأحدث 50
                      val trimmed = JSONArray()
                      val start = if (arr.length() > 50) arr.length() - 50 else 0
                      for (i in start until arr.length()) trimmed.put(arr.getString(i))
                      sp.edit().putString("history", trimmed.toString()).apply()
                  }
              }

              private fun showHistoryDialog() {
                  val sp = getSharedPreferences("rock_settings", MODE_PRIVATE)
                  val arr = JSONArray(sp.getString("history", "[]"))
                  val items = Array(arr.length()) { i -> arr.getString(arr.length()-1 - i) } // الأحدث أولاً
                  if (items.isEmpty()) {
                      AlertDialog.Builder(this).setMessage("لا يوجد عناصر في السجل.")
                          .setPositiveButton("حسناً", null).show()
                      return
                  }
                  AlertDialog.Builder(this)
                      .setTitle(getString(R.string.history))
                      .setItems(items) { _, which ->
                          val url = items[which]
                          showWeb()
                          binding.webView.loadUrl(url)
                      }
                      .setNegativeButton("إلغاء", null)
                      .show()
              }
          }
          EOF

          cat > Rock/app/src/main/java/com/rock/browser/SegmentedDownloader.kt <<'EOF'
          package com.rock.browser

          import android.content.ContentValues
          import android.content.Context
          import android.net.Uri
          import android.os.Build
          import android.provider.MediaStore
          import android.widget.Toast
          import kotlinx.coroutines.*
          import okhttp3.OkHttpClient
          import okhttp3.Request

          class SegmentedDownloader(private val context: Context, private val segments: Int = 4) {
              private val client = OkHttpClient()

              fun download(url: String, fileName: String, onDone: () -> Unit = {}) {
                  CoroutineScope(Dispatchers.IO).launch {
                      try {
                          val headReq = Request.Builder().url(url).head().build()
                          val headResp = client.newCall(headReq).execute()
                          val length = headResp.header("Content-Length")?.toLongOrNull()
                          if (length == null) {
                              singleStream(url, fileName)
                              withContext(Dispatchers.Main) {
                                  Toast.makeText(context, context.getString(R.string.download_complete), Toast.LENGTH_SHORT).show()
                                  onDone()
                              }
                              return@launch
                          }

                          val partSize = length / segments
                          val jobs = (0 until segments).map { idx ->
                              async {
                                  val start = idx * partSize
                                  val end = if (idx == segments - 1) length - 1 else (start + partSize - 1)
                                  val req = Request.Builder().url(url).addHeader("Range", "bytes=$start-$end").build()
                                  client.newCall(req).execute().use { resp -> resp.body?.bytes() ?: ByteArray(0) }
                              }
                          }

                          val parts = jobs.awaitAll()
                          saveToDownloads(fileName, parts)

                          withContext(Dispatchers.Main) {
                              Toast.makeText(context, context.getString(R.string.download_complete), Toast.LENGTH_SHORT).show()
                              onDone()
                          }
                      } catch (e: Exception) {
                          withContext(Dispatchers.Main) {
                              Toast.makeText(context, "Download error: ${e.message}", Toast.LENGTH_LONG).show()
                          }
                      }
                  }
              }

              private fun singleStream(url: String, fileName: String) {
                  val req = Request.Builder().url(url).build()
                  client.newCall(req).execute().use { resp ->
                      val bytes = resp.body?.bytes() ?: ByteArray(0)
                      saveToDownloads(fileName, listOf(bytes))
                  }
              }

              private fun saveToDownloads(fileName: String, parts: List<ByteArray>) {
                  val resolver = context.contentResolver
                  val values = ContentValues().apply {
                      put(MediaStore.Downloads.DISPLAY_NAME, fileName)
                      put(MediaStore.Downloads.MIME_TYPE, "application/octet-stream")
                  }
                  val externalContentUri: Uri = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                      MediaStore.Downloads.EXTERNAL_CONTENT_URI
                  } else {
                      MediaStore.Files.getContentUri("external")
                  }
                  val itemUri = resolver.insert(externalContentUri, values) ?: return
                  resolver.openOutputStream(itemUri, "w")?.use { os ->
                      parts.forEach { os.write(it) }
                      os.flush()
                  }
              }
          }
          EOF

          cat > Rock/app/src/main/java/com/rock/browser/SettingsActivity.kt <<'EOF'
          package com.rock.browser

          import android.content.res.Configuration
          import android.os.Bundle
          import android.widget.ArrayAdapter
          import androidx.appcompat.app.AppCompatActivity
          import com.rock.browser.databinding.ActivitySettingsBinding
          import java.util.Locale

          class SettingsActivity : AppCompatActivity() {
              private lateinit var binding: ActivitySettingsBinding

              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  binding = ActivitySettingsBinding.inflate(layoutInflater)
                  setContentView(binding.root)
                  title = getString(R.string.settings_title)

                  val prefs = getSharedPreferences("rock_settings", MODE_PRIVATE)
                  val currentSegments = prefs.getInt("segments", 4)
                  val currentLang = prefs.getString("lang", "en")!!
                  val currentHome = prefs.getString("home", "") ?: ""
                  val currentEngine = prefs.getString("engine", "duck") ?: "duck"
                  val currentBg = prefs.getString("bg_url", "") ?: ""

                  binding.homeInput.setText(currentHome)
                  binding.bgInput.setText(currentBg)

                  val langAdapter = ArrayAdapter<String>(
                      this, R.layout.spinner_item,
                      listOf(getString(R.string.english) + " (en)", getString(R.string.arabic) + " (ar)")
                  ).also { it.setDropDownViewResource(R.layout.spinner_dropdown_item) }
                  binding.langSpinner.adapter = langAdapter
                  binding.langSpinner.setSelection(if (currentLang == "en") 0 else 1)

                  val segOptions = listOf(1,2,4,8)
                  val segAdapter = ArrayAdapter<Int>(this, R.layout.spinner_item, segOptions).also {
                      it.setDropDownViewResource(R.layout.spinner_dropdown_item)
                  }
                  binding.segSpinner.adapter = segAdapter
                  binding.segSpinner.setSelection(segOptions.indexOf(currentSegments))

                  val engines = listOf("DuckDuckGo","Google","Bing","Brave")
                  val engineKeys = listOf("duck","google","bing","brave")
                  val engAdapter = ArrayAdapter(this, R.layout.spinner_item, engines).also {
                      it.setDropDownViewResource(R.layout.spinner_dropdown_item)
                  }
                  binding.engineSpinner.adapter = engAdapter
                  binding.engineSpinner.setSelection(engineKeys.indexOf(currentEngine))

                  binding.clearHistoryBtn.setOnClickListener {
                      prefs.edit().remove("history").apply()
                  }

                  binding.saveBtn.setOnClickListener {
                      val lang = if (binding.langSpinner.selectedItemPosition == 0) "en" else "ar"
                      val segs = segOptions[binding.segSpinner.selectedItemPosition]
                      val home = binding.homeInput.text.toString().trim()
                      val engine = engineKeys[binding.engineSpinner.selectedItemPosition]
                      val bg = binding.bgInput.text.toString().trim()
                      prefs.edit()
                          .putString("lang", lang)
                          .putInt("segments", segs)
                          .putString("home", home)
                          .putString("engine", engine)
                          .putString("bg_url", bg)
                          .apply()
                      applyLanguage(lang)
                      finish()
                  }
              }

              private fun applyLanguage(lang: String) {
                  val locale = Locale(lang)
                  Locale.setDefault(locale)
                  val config = Configuration(resources.configuration)
                  config.setLocale(locale)
                  resources.updateConfiguration(config, resources.displayMetrics)
              }
          }
          EOF

      - name: Commit generated files
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git add Rock
          git commit -m "Rock: bg via URL, History+Home buttons, engine switcher, hidden WebView" || echo "No changes"
          git push

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK packages
        run: |
          sdkmanager --install "platforms;android-34" "build-tools;34.0.0" "platform-tools"

      - name: Build Debug APK (no wrapper)
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: Rock
          arguments: :app:assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Rock-debug-apk
          path: Rock/app/build/outputs/apk/debug/*.apk
